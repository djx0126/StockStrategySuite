package com.djx.stockgainanalyzer;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.djx.stockgainanalyzer.data.CachedStockGainData;
import com.djx.stockgainanalyzer.data.Field;
import com.djx.stockgainanalyzer.data.PreviousData;
import com.djx.stockgainanalyzer.data.StockGainData;
import com.stockstrategy.constant.ArgParser;
import com.stockstrategy.constant.Constant;
;




public class StockStrategyCaculator {
	public static final int PREVIOUS_NUM = StockAnalyzer.PREVIOUS_NUM;
	public static final int GAIN_NUM = StockAnalyzer.GAIN_NUM;
	public static final double E = StockAnalyzer.E;
//	public static final Field[] PARAMS = {Field.close, Field.closeOpen, Field.vol, Field.open, Field.high, Field.low};
	public static final Field[] PARAMS = StockAnalyzer.PARAMS;

	private static List<StockGainData> allData = new ArrayList<StockGainData>();
	private static StockRandomSelector randomSelector;
	
	public static synchronized void addData(StockGainData stockGainData){
		allData.add(stockGainData);
	}
	
// max	
//	private static double[] closeOffset={0.0033279433489274797, 0.008092677921693292, 0.00341696870380724, -0.006131318051498147, -0.007378153206220686, -0.010745408125701954, -0.014499796830233102, -6.47717468165628E-4, 0.0019460576934463836, 0.017241434406692353, 0.008194478615271538, 0.009114800387956578, -0.010943432093505654, 0.01206203845932047, -0.005345230329183166, -6.635516675157797E-4, 0.004666294121189704, -0.005328833505066896, -0.006570389794640838, -0.0013022333052445899, 0.0026083831075282135, 0.0032826647740076247, -0.01489896006246909, 6.372627436937631E-4, 0.009011473535341822, 0.002528650415200219, -0.0018978667430857373, 0.0038040635790323883, 0.0044806018254539915, -6.429231106109865E-4};
//	private static double[] closeOpenOffset={0.001993704259862904, 0.018986449886555817, 0.00341696870380724, -0.005454319501462345, -0.00537832857400232, 0.002668484474704657, -0.014499796830233102, 0.004561274296053283, 0.015147514298398666, 0.007872623099885403, 0.008194478615271538, 0.008213102225583323, -0.010943432093505654, 0.013647350202815482, -0.005345230329183166, -6.635516675157797E-4, 0.006681585356515309, -0.0013383507722621957, -0.006570389794640838, -0.005829543660723844, 0.0026083831075282135, 0.0, -0.01680515689841571, -6.363290250536116E-4, -0.005072109994840683, 0.0012624848480753223, 0.0, 0.005079525529274971, 0.007709571955652465, -0.004480601825453991};
//	private static double[] volOffset={0.25588221095107677, 0.19837277667300318, -0.18060838941504098, -0.2095188244560679, 0.002901929586643697, -0.053438505469279446, -0.20776617483274049, 0.11050988467818881, -0.30624796815376454, 1.1453447822894525, 0.10196555905478955, -0.037957944253231866, 0.33655968433077116, -0.18219854455866352, -0.09245313686248569, -0.04092054035879283, -0.050046245909228335, -0.07386208094967883, -0.09508416897153031, 0.1238121370507174, 0.005378995656779959, -0.1871183384095077, 0.11384019458959706, -0.08446620228448368, 0.00985783775687089, 0.29512380533592864, -0.254095038389, -0.06648352997276623, 0.12254350354178956, 0.10849271049692848};
//	private static double[] openOffset={0.009426917010757875, 0.00341696870380724, -0.005454319501462345, -0.00605532712403815, 6.686598424863587E-4, -0.013830105900457223, 0.004561274296053283, 0.009938522534179796, -0.005328833505066896, 0.0175632899220786, 0.002766216243152061, -0.011636639713792406, -0.002693307744478303, -0.004673467655566888, -6.635516675157797E-4, -0.003969322859053244, -0.0033536420075877937, -0.0105608725274455, -0.005829543660723844, 0.007135693463007425, 0.0, -0.013522492124408087, 0.001269867810892938, -0.0037985182260932096, 0.0012624848480753223, 0.001266165567124895, 0.003181658786189243, 0.006434110005409903, -0.007709571955652475, 6.372627436937631E-4};
//	private static double[] highOffset={0.0039904827328046686, 0.008092677921693292, -0.004065188638649808, -0.005361728372108067, -0.003978297882035305, -0.007848909086870928, -0.0019402615231504054, 6.457911701516482E-4, -0.00832129843860033, 0.027479598568203468, 0.007493894641837004, -0.007493894641837021, -0.004702383718633543, -0.003990482732804656, 0.0, 6.625393838772397E-4, 0.0033279433489274797, -0.011863105832690067, -0.007093311804956036, 0.006443656512678527, 0.0019518885975220242, -0.012216342322124471, 0.008351480595732312, -0.0025286504152002296, -6.298688296295621E-4, 0.001260652501744011, -0.0025176562212465207, 0.005685390775225206, -6.353980385836329E-4, -0.0050499927366415755};
//	private static double[] lowOffset={0.006083601947538069, 0.006170033275893363, -0.002753064572086173, -0.00409714814104502, -0.005403422510300206, 0.0, -0.0053370193230826805, 0.005337019323082664, -0.005999558706959872, 0.018944195638464143, 0.05775058976762966, -0.004175940654136222, -0.010943432093505654, -0.0020215450708620363, 0.0, 0.002697489926230812, 0.004761302776877634, -0.011473870439944512, 0.02577566397048812, -6.565299540596675E-4, 0.003954150064039709, -0.0013220542382952514, -0.0117208023276804, 0.005170233466090299, -0.00964424120598693, 0.001273591768747416, 6.381992065488362E-4, 0.009034683535935192, 0.0019607007655279246, -0.007790244426251788};
//	private static double[] closeScale={0.023157156889174593, 0.07526075988981742, 0.04052502455605554, 0.046314313778349187, 0.07526075988981742, 0.005789289222293648, 0.08683933833440473, 0.06368218144523013, 0.02894644611146824, 0.10420720600128566, 0.08105004911211108, 0.03473573533376189, 0.10999649522357932, 0.023157156889174593, 0.04052502455605554, 0.02894644611146824, 0.10420720600128566, 0.10420720600128566, 0.10999649522357932, 0.08683933833440473, 0.08105004911211108, 0.08105004911211108, 0.10420720600128566, 0.08105004911211108, 0.005789289222293648, 0.09262862755669837, 0.09841791677899202, 0.08683933833440473, 0.09262862755669837, 0.04052502455605554};
//	private static double[] closeOpenScale={0.052458224853794436, 0.01907571812865252, 0.05722715438595756, 0.01430678859648939, 0.06676501345028382, 0.03815143625730504, 0.01907571812865252, 0.06199608391812069, 0.03815143625730504, 0.01430678859648939, 0.023844647660815652, 0.028613577192978783, 0.03815143625730504, 0.01430678859648939, 0.07630287251461008, 0.02861357719297878, 0.01430678859648939, 0.01907571812865252, 0.08584073157893635, 0.02861357719297878, 0.047689295321631305, 0.047689295321631305, 0.047689295321631305, 0.01430678859648939, 0.04292036578946817, 0.08584073157893635, 0.06676501345028382, 0.08107180204677321, 0.04292036578946817, 0.09060966111109947};
//	private static double[] volScale={0.26722223050528393, 2.4050000745475555, 4.810000149095111, 3.741111227073975, 0.5344444610105679, 0.26722223050528393, 4.275555688084543, 0.26722223050528393, 0.5344444610105679, 2.1377778440422714, 0.5344444610105679, 0.8016666915158518, 2.1377778440422714, 1.6033333830317036, 2.4050000745475555, 1.3361111525264198, 4.275555688084543, 3.473888996568691, 0.8016666915158518, 5.077222379600395, 3.206666766063407, 2.1377778440422714, 1.8705556135369874, 4.5427779185898265, 5.077222379600395, 4.008333457579259, 2.6722223050528395, 0.5344444610105679, 0.5344444610105679, 2.1377778440422714};
//	private static double[] openScale={0.16825371639273373, 0.07477942950788166, 0.018694857376970415, 0.07477942950788166, 0.08412685819636687, 0.17760114508121894, 0.14955885901576332, 0.09347428688485207, 0.028042286065455623, 0.018694857376970415, 0.15890628770424853, 0.14021143032727812, 0.046737143442426035, 0.14021143032727812, 0.17760114508121894, 0.03738971475394083, 0.06543200081939646, 0.15890628770424853, 0.14955885901576332, 0.14021143032727812, 0.10282171557333729, 0.14955885901576332, 0.018694857376970415, 0.028042286065455623, 0.03738971475394083, 0.11216914426182249, 0.16825371639273373, 0.07477942950788166, 0.15890628770424853, 0.056084572130911246};
//	private static double[] highScale={0.07925048043644145, 0.12547992735769894, 0.12547992735769894, 0.05943786032733109, 0.1056673072485886, 0.05943786032733109, 0.02641682681214715, 0.039625240218220725, 0.05943786032733109, 0.11887572065466218, 0.07925048043644145, 0.02641682681214715, 0.04622944692125751, 0.07925048043644145, 0.033021033515183935, 0.09906310054555181, 0.013208413406073575, 0.019812620109110363, 0.1056673072485886, 0.11227151395162538, 0.11887572065466218, 0.07264627373340465, 0.013208413406073575, 0.05943786032733109, 0.039625240218220725, 0.11887572065466218, 0.02641682681214715, 0.1056673072485886, 0.04622944692125751, 0.08585468713947823};
//	private static double[] lowScale={0.15884468779688174, 0.11212566197426946, 0.03737522065808982, 0.09343805164522455, 0.17753229812592664, 0.09343805164522455, 0.1681884929614042, 0.11212566197426946, 0.1681884929614042, 0.102781856809747, 0.009343805164522455, 0.09343805164522455, 0.14015707746783682, 0.028031415493567365, 0.07475044131617964, 0.09343805164522455, 0.13081327230331435, 0.046719025822612274, 0.009343805164522455, 0.12146946713879192, 0.07475044131617964, 0.06540663615165718, 0.046719025822612274, 0.03737522065808982, 0.0840942464807021, 0.046719025822612274, 0.13081327230331435, 0.09343805164522455, 0.11212566197426946, 0.028031415493567365};

	private static double[] closeOffset={0.009643334159932421, 0.01149428669050777, -0.012573279747147292, 0.0109124957656828, -0.012472407640396116, -0.015767368050822426, 0.006200286104570808, -0.019428551838325956, -0.009663316679379384, 0.0021288987821217356, 0.016862642831257848, 0.0, -0.0060587403691528575, 0.016727143851406407, -0.0017020053732910417, 0.0022708259941005347, -0.025268546358820865, 0.04161319518169976, 0.006108321256051858, 0.009326653677605353, 0.0018896091386871516, -0.012444819454257744, 0.011266866824146005, 0.008820130877058647, -0.006057203932782739, 0.009732496517835339, -0.002453647667271522, 0.003069231727676536, -0.0024571181916678325, -6.121135360087424E-4};
	private static double[] openOffset={0.004895042851584595, -0.004353865857067212, 0.008199635925098906, 0.010048392557633538, -0.003375362704879229, 0.002247324455353307, -0.016035608940986615, -0.010193914768474852, 0.0, 0.053743731008689045, -0.015443636285644005, 0.0, 0.012998723190407577, -0.006265340531439225, 0.004547627750720661, -0.02064472911532099, 0.0582229270117902, 0.027407361067896242, 0.00804845309965516, 0.004396366354602633, -0.011216262816292457, -0.0018415341312627792, -0.00183375845378982, -0.0048525027944120724, 0.008527795379464707, -0.002453647667271522, 0.0012250910293062328, 0.0018441406983703622, -0.006116924809681944, 0.0012165119492150802};
	private static double[] highOffset={0.0058725409858322725, -0.0021446684665890974, -0.006897919308749824, 0.021031402510517206, 0.0033279433489274797, -0.0011121503693676202, -0.009883233932095567, -0.010193914768474852, -0.001059255359022372, -0.001584054577674994, 0.01610670927001956, 0.0, -0.0016378189690160751, 0.012717360713219711, 0.0, -0.01271736071321973, 0.004932103906557056, 0.04040177324725501, 0.00609118655253134, 0.007424018079206875, -0.009260361119204226, -6.10392907090033E-4, -0.0024330286709992113, -0.0024194741234128915, -0.003604124268825242, -0.0036840969721532845, -6.112520106910412E-4, 0.0, -0.003043421578089236, -0.0024194741234128915};
	private static double[] lowOffset={0.02894030567643966, 0.0033709960857065194, -0.008378931572770618, 0.008943316943821446, 5.651197699191048E-4, 0.001699784877894385, -0.03241063269398678, -0.018982471885897457, -0.02006656387398908, 0.009328224934000201, 0.0022243043853789803, 0.0016757364143760126, 0.01770544850989556, -0.008085503147187484, 0.0022948242662921077, 0.0, 0.01760894505819458, 0.033826289486348415, 0.0024959521683062215, 0.005668898962429362, -6.335442143261354E-4, -0.011865001284646987, 6.164578492865119E-4, -0.021029395115478862, 0.0024536476672715685, 0.001849376031979738, 0.0, 0.0018572850055671019, -0.0018572850055671595, 6.182128900187441E-4};
	private static double[] volOffset={0.1308035252685267, -0.019647079833367966, -0.19273431410140693, 0.3688571592804564, 0.15611866385396297, -0.19840105427466895, -0.12501107982601334, -0.021555327789043382, -0.11668333200505408, -0.256455606575484, 0.34620341627067225, -0.0951600329863212, -0.1314759374694978, 0.33514067140967996, -0.0772521933311916, -0.4190639459392314, -0.2807846519440817, 0.7822156141759072, 0.3679246774223405, 0.08907714109671307, -0.31070732736609197, 0.14967209182507618, 0.019662551984978273, -0.30178232022799373, -0.23197365988898375, 0.26046983742668556, 0.20124758298273995, 0.04494180424014226, 0.1080110520931905, -0.21899141604261227};
	private static double[] closeScale={0.0744337185723469, 0.08932046228681628, 0.03721685928617345, 0.08932046228681628, 0.00744337185723469, 0.00744337185723469, 0.02233011557170407, 0.02233011557170407, 0.0744337185723469, 0.08932046228681628, 0.08187709042958159, 0.01488674371446938, 0.0744337185723469, 0.08932046228681628, 0.09676383414405097, 0.0744337185723469, 0.01488674371446938, 0.06699034671511221, 0.04466023114340814, 0.0744337185723469, 0.04466023114340814, 0.11165057785852035, 0.02977348742893876, 0.05210360300064283, 0.0744337185723469, 0.04466023114340814, 0.02233011557170407, 0.08932046228681628, 0.0744337185723469, 0.01488674371446938};
	private static double[] openScale={0.1691551689662337, 0.060412560345083466, 0.03624753620705008, 0.03624753620705008, 0.07249507241410016, 0.060412560345083466, 0.14499014482820033, 0.15707265689721703, 0.07249507241410016, 0.012082512069016694, 0.024165024138033387, 0.10874260862115025, 0.10874260862115025, 0.07249507241410016, 0.07249507241410016, 0.060412560345083466, 0.10874260862115025, 0.012082512069016694, 0.12082512069016693, 0.08457758448311685, 0.048330048276066774, 0.08457758448311685, 0.14499014482820033, 0.13290763275918363, 0.060412560345083466, 0.060412560345083466, 0.14499014482820033, 0.12082512069016693, 0.1812376810352504, 0.14499014482820033};
	private static double[] highScale={0.07642010613513997, 0.025473368711713323, 0.12736684355856662, 0.11038459775075773, 0.08491122903904441, 0.12736684355856662, 0.09340235194294885, 0.042455614519522206, 0.025473368711713323, 0.06792898323123553, 0.06792898323123553, 0.09340235194294885, 0.09340235194294885, 0.11038459775075773, 0.07642010613513997, 0.016982245807808882, 0.09340235194294885, 0.07642010613513997, 0.025473368711713323, 0.06792898323123553, 0.11038459775075773, 0.1018934748468533, 0.09340235194294885, 0.11038459775075773, 0.08491122903904441, 0.07642010613513997, 0.08491122903904441, 0.12736684355856662, 0.08491122903904441, 0.033964491615617765};
	private static double[] lowScale={0.01240466232428896, 0.13645128556717853, 0.0868326362700227, 0.11164196091860061, 0.12404662324288956, 0.09923729859431166, 0.024809324648577914, 0.06202331162144478, 0.04961864929715583, 0.16126061021575644, 0.04961864929715583, 0.16126061021575644, 0.06202331162144478, 0.11164196091860061, 0.012404662324288957, 0.1736652725400454, 0.04961864929715583, 0.012404662324288957, 0.1488559478914675, 0.16126061021575644, 0.037213986972866875, 0.06202331162144478, 0.11164196091860061, 0.024809324648577914, 0.16126061021575644, 0.09923729859431166, 0.06202331162144478, 0.13645128556717853, 0.07442797394573375, 0.04961864929715583};
	private static double[] volScale={2.8263769649990764, 0.35329712062488455, 4.5928625681235, 2.1197827237493074, 4.946159688748383, 4.946159688748383, 4.239565447498615, 1.7664856031244227, 4.5928625681235, 3.179674085623961, 3.88626832687373, 0.35329712062488455, 4.5928625681235, 2.1197827237493074, 1.4131884824995382, 1.4131884824995382, 4.239565447498615, 3.179674085623961, 1.7664856031244227, 2.8263769649990764, 2.8263769649990764, 3.88626832687373, 4.239565447498615, 2.8263769649990764, 1.4131884824995382, 0.7065942412497691, 5.299456809373268, 3.88626832687373, 2.4730798443741917, 0.7065942412497691};


    /**
     * @param args
     */
    public static void main(String[] args) {
		ArgParser.loadInitConfigures(args, Constant.class);
        // TODO Auto-generated method stub
        System.out.println("Start");
        long startTime = System.currentTimeMillis();
        StrategyHelper.generateData();
        allData = StockAnalyzer.getData();
        System.out.println("Total "+allData.size()+" records loaded.");
        if (allData.size()<=0){
        	return;
        }
        Utils.transeferToLog(allData, PARAMS);
        randomSelector = new StockRandomSelector(allData);
        
        System.out.println("Start at "+ new Date());
        System.out.println("Env Params:");
    	
    	
    	
    	double[][] maxOffsetParams = new double[Field.LENGTH][];
    	maxOffsetParams[0]=closeOffset;
    	maxOffsetParams[1]=openOffset;
    	maxOffsetParams[2]=highOffset;
    	maxOffsetParams[3]=lowOffset;
    	maxOffsetParams[4]=volOffset;
    	
        double[][] maxScaleParams = new double[Field.LENGTH][];
        maxScaleParams[0]=closeScale;
        maxScaleParams[1]=openScale;
        maxScaleParams[2]=highScale;
        maxScaleParams[3]=lowScale;
        maxScaleParams[4]=volScale;
    	
    	Result resultFromLearn = calculateOnList(null, maxOffsetParams, maxScaleParams);
    	printResult(resultFromLearn, "All data");
    	
    	Result resultFromCalMap = calculateOnList(false, maxOffsetParams, maxScaleParams);
    	printResult(resultFromCalMap, "verify");
        
        long endTime = System.currentTimeMillis();
        System.out.println("time passed:"+(endTime-startTime)/1000 +" seconds.");
        System.out.println("End at "+ new Date());
        
    }
    
    private static void printResult(Result resultFromCalMap, String name){
    	System.out.println("*********************  "+name+" result="+resultFromCalMap.getTargetResult()+", " + resultFromCalMap);
    	
    }
    
   
    private static double adjustSmallGain(double gain){
    	return (gain-1.00000000000d)*100.0d;
    }
    
    
    
    private static Result calculateOnList(Boolean phaseLearn, final double[][] offsetParams, final double[][] scaleParams){
    	StockStrategyCaculator caculator = new StockStrategyCaculator();
    	return caculator.calculateOnList(allData, randomSelector, phaseLearn, offsetParams, scaleParams, true);
    }
    
    public Result calculateOnList(List<StockGainData> allData, IStockSelector randomSelector, Boolean phaseLearn, final double[][] offsetParams, final double[][] scaleParams){
    	return calculateOnList(allData, randomSelector, phaseLearn, offsetParams, scaleParams, false);
    }
    
    private Result calculateOnList(List<StockGainData> allData, IStockSelector randomSelector, Boolean phaseLearn, final double[][] offsetParams, final double[][] scaleParams, boolean debug){
    	double MIN = -1000000000.0d;
    	double sum = 0d;
    	double gainSum = 0;
    	double lostSum = 0;
    	int count = 0;
    	int countHigherThanTarget = 0;
    	double value = 0.0d;
    	double temp = 0.0d;
    	double scale = 0.0d;
    	int allSize = allData.size();
    	Map<String, List<StockGainData>> stockGainResults = new HashMap<>();
    	double limit = PREVIOUS_NUM;//*PARAMS.length/5; 
    	double[][] scaleSquare = new double[Field.LENGTH][PREVIOUS_NUM];
    	
    	for (Field param: PARAMS){
    		for (int j=0;j<PREVIOUS_NUM;j++){
				scale = scaleParams[param.getIdx()][j];
				scaleSquare[param.getIdx()][j] = scale*scale;
			}
    	}
    	
    	for (int i=0;i<allSize;i++){
    		StockGainData data = allData.get(i);
    		if (phaseLearn!=null &&  phaseLearn==true && data.getKeyDate().equals("20130709")
    				&& data.getKeyDate().equals("20130708")){
    			continue;
    		}
    		
    		if(phaseLearn==null || randomSelector.isStockSelected(data)==phaseLearn){
    			value = 0.0f;
    			List<PreviousData> pDatas = data.getPreviousData();
    			for (int j=0;j<PREVIOUS_NUM && value<=limit;j++){
    				PreviousData pData = pDatas.get(j);
    				
    				
    				for (Field param: PARAMS){
    					if (value<=PREVIOUS_NUM){
    						temp = pData.getValue(param)+offsetParams[param.getIdx()][j];
            				value += temp*temp/scaleSquare[param.getIdx()][j];
    					}
    				}
    				
    			}
    			if (value<=limit){
    				boolean valid = false;
    				if (!stockGainResults.containsKey(data.getStockCode())){
    					List<StockGainData> stockGainDataList = new ArrayList<>();
    					stockGainDataList.add(data);
    					stockGainResults.put(data.getStockCode(), stockGainDataList);
    					valid = true;
    				}else if(!stockGainDataOverLap(data, stockGainResults.get(data.getStockCode()))){
    					stockGainResults.get(data.getStockCode()).add(data);
    					valid = true;
    				}
    				if (valid){
    					if (debug){
    						System.out.println(data);
    					}
    	    			double gain = data.getGain();
    					gain = adjustSmallGain(Math.pow(10,gain));
    					if (gain>0){
    						gainSum+=gain;
    					}else{
    						lostSum+= (-gain);
    					}
    					sum += gain;
    					count++;
    					if (gain > 0.0d){
    						countHigherThanTarget++;
    					}
    				}
    			}
    		}
    	}
    	
    	
//    	System.out.println("sum:"+sum" ,  in:"+count+", all:"+allData.size());
    	double avgGain = count>0? (sum/count):MIN;
    	if (lostSum < E){
    		lostSum = E;
    	}
    	double rate = lostSum>0?gainSum/lostSum:MIN;
    	Result result = new Result();
    	result.setAvgGain(avgGain);
    	result.setCount(count);
    	result.setRate(rate);
    	result.setSum(sum);
    	result.setLost(lostSum);
    	result.setAccuracy(count>0?100.0f*countHigherThanTarget/count:0);
    	return result;
    }

    // this is only for learn phase
    public Result calculateOnListWithCache(List<CachedStockGainData> cachedDatas, IStockSelector randomSelector, Boolean phaseLearn, int fieldIdx, int preIdx, double offsetValue, double scaleValue, boolean debug){
    	double MIN = -1000000000.0d;
    	double sum = 0d;
    	double gainSum = 0;
    	double lostSum = 0;
    	int count = 0;
    	int countHigherThanTarget = 0;
    	double value = 0.0d;
    	double temp = 0.0d;
    	double scale = 0.0d;
    	int allSize = cachedDatas.size();
    	Map<String, List<StockGainData>> stockGainResults = new HashMap<>();
    	double limit = PREVIOUS_NUM;//*PARAMS.length/5; 
//    	double[][] scaleSquare = new double[PARAMS.length][PREVIOUS_NUM];
//    	for (int k=0;k<PARAMS.length;k++){
//    		for (int j=0;j<PREVIOUS_NUM;j++){
//				scale = scaleParams[k][j];
//				scaleSquare[k][j] = scale*scale;
//			}
//    	}
    	double scaleValue2 = scaleValue*scaleValue; // cache the scale*scale to improve performance
    	
    	for (int i=0;i<allSize;i++){
    		CachedStockGainData cachedData = cachedDatas.get(i);
    		StockGainData stockData = cachedData.getRawData();
    		
    		if (phaseLearn!=null &&  phaseLearn==true && stockData.getKeyDate().equals("20130709")
    				&& stockData.getKeyDate().equals("20130708")){
    			continue;
    		}
    		
    		if(phaseLearn==null || randomSelector.isStockSelected(stockData)==phaseLearn){
    			
    			value = cachedData.getValueWithSquareScale(fieldIdx, preIdx, scaleValue2, offsetValue);
    			
    			
    			if (value<=limit){
    				boolean valid = false;
    				if (!stockGainResults.containsKey(stockData.getStockCode())){
    					List<StockGainData> stockGainDataList = new ArrayList<>();
    					stockGainDataList.add(stockData);
    					stockGainResults.put(stockData.getStockCode(), stockGainDataList);
    					valid = true;
    				}else if(!stockGainDataOverLap(stockData, stockGainResults.get(stockData.getStockCode()))){
    					stockGainResults.get(stockData.getStockCode()).add(stockData);
    					valid = true;
    				}
    				if (valid){
    					if (debug){
    						System.out.println(stockData);
    					}
    	    			double gain = stockData.getGain();
    					gain = adjustSmallGain(Math.pow(10,gain));
    					if (gain>0){
    						gainSum+=gain;
    					}else{
    						lostSum+= (-gain);
    					}
    					sum += gain;
    					count++;
    					if (gain > 0.0d){
    						countHigherThanTarget++;
    					}
    				}
    			}
    		}
    	}
    	
    	
//    	System.out.println("sum:"+sum" ,  in:"+count+", all:"+allData.size());
    	double avgGain = count>0? (sum/count):MIN;
    	if (lostSum < E){
    		lostSum = E;
    	}
    	double rate = lostSum>0?gainSum/lostSum:MIN;
    	Result result = new Result();
    	result.setAvgGain(avgGain);
    	result.setCount(count);
    	result.setRate(rate);
    	result.setSum(sum);
    	result.setLost(lostSum);
    	result.setAccuracy(count>0?100.0f*countHigherThanTarget/count:0);
    	return result;
    }

    
    private boolean stockGainDataOverLap(StockGainData data,
			List<StockGainData> list) {
		boolean result = false;
		StockGainData lastData = list.get(list.size()-1);
		if (stockGainDateOverLap(data.getKeyDate(), lastData) || stockGainDateOverLap(lastData.getKeyDate(), data)){
			result = true;
		}
		return result;
	}
	
	private boolean stockGainDateOverLap(String keyDate, StockGainData data){
		boolean result = false;
		List<PreviousData> previousDatas = data.getPreviousData();
		if (previousDatas.get(0).getDate().compareTo(keyDate)>=0 && previousDatas.get(GAIN_NUM-1).getDate().compareTo(keyDate)<=0){
			result = true;
		}
		return result;
	}
    
    
    
}
